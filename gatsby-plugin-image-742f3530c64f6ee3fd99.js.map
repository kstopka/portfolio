{"version":3,"file":"gatsby-plugin-image-742f3530c64f6ee3fd99.js","mappings":"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","sources":["webpack://kstopka-portfolio/../src/image-utils.ts","webpack://kstopka-portfolio/../src/components/hooks.ts","webpack://kstopka-portfolio/../src/components/layout-wrapper.tsx","webpack://kstopka-portfolio/../src/components/placeholder.tsx","webpack://kstopka-portfolio/../src/components/picture.tsx","webpack://kstopka-portfolio/../src/components/main-image.tsx","webpack://kstopka-portfolio/../src/components/gatsby-image.browser.tsx","webpack://kstopka-portfolio/../src/components/gatsby-image.server.tsx","webpack://kstopka-portfolio/../src/components/static-image.server.tsx","webpack://kstopka-portfolio/../src/components/static-image.tsx","webpack://kstopka-portfolio/./node_modules/camelcase/index.js"],"sourcesContent":["import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  outputPixelDensities?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Partial<Node> & {\n  childImageSharp?: IGatsbyImageDataParent<Partial<Node>>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (\n  node: ImageDataLike | null\n): IGatsbyImageData | undefined => {\n  // This checks both for gatsbyImageData and gatsbyImage\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { Fragment, FunctionComponent, PropsWithChildren } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg%20height='${height}'%20width='${width}'%20xmlns='http://www.w3.org/2000/svg'%20version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<\n  PropsWithChildren<ILayoutWrapperProps>\n> = function LayoutWrapper({ children, ...props }) {\n  return (\n    <Fragment>\n      <Sizer {...props} />\n      {children}\n\n      {SERVER ? <NativeScriptLoading /> : null}\n    </Fragment>\n  )\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        onStartLoad?.({\n          wasCached: true,\n        })\n\n        ssrImage.addEventListener(`load`, function onLoadListener() {\n          ssrImage.removeEventListener(`load`, onLoadListener)\n\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        if (!root.current) {\n          return\n        }\n\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n  filename?: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    breakpoints,\n    outputPixelDensities,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","'use strict';\n\nconst UPPERCASE = /[\\p{Lu}]/u;\nconst LOWERCASE = /[\\p{Ll}]/u;\nconst LEADING_CAPITAL = /^[\\p{Lu}](?![\\p{Lu}])/gu;\nconst IDENTIFIER = /([\\p{Alpha}\\p{N}_]|$)/u;\nconst SEPARATORS = /[_.\\- ]+/;\n\nconst LEADING_SEPARATORS = new RegExp('^' + SEPARATORS.source);\nconst SEPARATORS_AND_IDENTIFIER = new RegExp(SEPARATORS.source + IDENTIFIER.source, 'gu');\nconst NUMBERS_AND_IDENTIFIER = new RegExp('\\\\d+' + IDENTIFIER.source, 'gu');\n\nconst preserveCamelCase = (string, toLowerCase, toUpperCase) => {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < string.length; i++) {\n\t\tconst character = string[i];\n\n\t\tif (isLastCharLower && UPPERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i) + '-' + string.slice(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && LOWERCASE.test(character)) {\n\t\t\tstring = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = toLowerCase(character) === character && toUpperCase(character) !== character;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = toUpperCase(character) === character && toLowerCase(character) !== character;\n\t\t}\n\t}\n\n\treturn string;\n};\n\nconst preserveConsecutiveUppercase = (input, toLowerCase) => {\n\tLEADING_CAPITAL.lastIndex = 0;\n\n\treturn input.replace(LEADING_CAPITAL, m1 => toLowerCase(m1));\n};\n\nconst postProcess = (input, toUpperCase) => {\n\tSEPARATORS_AND_IDENTIFIER.lastIndex = 0;\n\tNUMBERS_AND_IDENTIFIER.lastIndex = 0;\n\n\treturn input.replace(SEPARATORS_AND_IDENTIFIER, (_, identifier) => toUpperCase(identifier))\n\t\t.replace(NUMBERS_AND_IDENTIFIER, m => toUpperCase(m));\n};\n\nconst camelCase = (input, options) => {\n\tif (!(typeof input === 'string' || Array.isArray(input))) {\n\t\tthrow new TypeError('Expected the input to be `string | string[]`');\n\t}\n\n\toptions = {\n\t\tpascalCase: false,\n\t\tpreserveConsecutiveUppercase: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(input)) {\n\t\tinput = input.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tinput = input.trim();\n\t}\n\n\tif (input.length === 0) {\n\t\treturn '';\n\t}\n\n\tconst toLowerCase = options.locale === false ?\n\t\tstring => string.toLowerCase() :\n\t\tstring => string.toLocaleLowerCase(options.locale);\n\tconst toUpperCase = options.locale === false ?\n\t\tstring => string.toUpperCase() :\n\t\tstring => string.toLocaleUpperCase(options.locale);\n\n\tif (input.length === 1) {\n\t\treturn options.pascalCase ? toUpperCase(input) : toLowerCase(input);\n\t}\n\n\tconst hasUpperCase = input !== toLowerCase(input);\n\n\tif (hasUpperCase) {\n\t\tinput = preserveCamelCase(input, toLowerCase, toUpperCase);\n\t}\n\n\tinput = input.replace(LEADING_SEPARATORS, '');\n\n\tif (options.preserveConsecutiveUppercase) {\n\t\tinput = preserveConsecutiveUppercase(input, toLowerCase);\n\t} else {\n\t\tinput = toLowerCase(input);\n\t}\n\n\tif (options.pascalCase) {\n\t\tinput = toUpperCase(input.charAt(0)) + input.slice(1);\n\t}\n\n\treturn postProcess(input, toUpperCase);\n};\n\nmodule.exports = camelCase;\n// TODO: Remove this for the next major release\nmodule.exports.default = camelCase;\n"],"names":["g","p","m","f","w","y","b","e","console","warn","v","t","E","concat","k","map","src","width","join","S","lastIndexOf","a","slice","length","M","_e$layout","layout","i","height","s","sourceMetadata","r","breakpoints","n","aspectRatio","_e$formats","formats","o","toLowerCase","l","h","Math","round","N","arguments","undefined","_e","generateImageSource","filename","format","fit","options","$","_e2","pluginName","d","_e2$reporter","reporter","c","u","backgroundColor","placeholderURL","Error","Set","size","has","add","_e$layout2","_e$reporter","_e$breakpoints","Object","entries","filter","_ref","_ref2","_slicedToArray","_ref3","_ref3$fit","_ref3$outputPixelDens","outputPixelDensities","_ref3$reporter","I","j","sizes","presentationWidth","presentationHeight","unscaledWidth","x","sources","forEach","Boolean","find","fallback","srcSet","push","type","L","images","placeholder","Array","from","_toConsumableArray","sort","_ref4","_ref4$fit","_ref4$outputPixelDens","min","includes","Number","MAX_SAFE_INTEGER","max","T","W","HTMLImageElement","prototype","_","gatsbyImageData","gatsbyImage","childImageSharp","C","O","z","className","style","D","baseUrl","urlBuilder","sourceWidth","sourceHeight","_e$pluginName","_e$formats2","P","loading","shouldLoad","opacity","A","position","top","left","bottom","right","objectFit","objectPosition","transition","q","_s$images$sources2","_r$sources","_ref5","_s$images$sources","media","image","apply","X","H","F","_ref6","paddingTop","maxWidth","display","alt","role","G","children","V","B","U","_t$alt","decoding","Y","_t$sources","_t$shouldLoad","_ref7","key","propTypes","isRequired","displayName","J","Z","K","oe","le","Q","ee","te","replace","ae","_len","_key","ie","se","re","ne","de","_e$as","as","onStartLoad","onLoad","onError","JSON","stringify","then","_ref8","renderImageToString","swapPlaceholderImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","addEventListener","removeEventListener","_ref9","innerHTML","isLoading","isLoaded","requestAnimationFrame","cancelAnimationFrame","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","ce","he","ue","__imageData","__error","ge","_t$as","_t$loading","imgClassName","imgStyle","pe","_len2","_key2","me","fe","we","UPPERCASE","LOWERCASE","LEADING_CAPITAL","IDENTIFIER","SEPARATORS","LEADING_SEPARATORS","RegExp","source","SEPARATORS_AND_IDENTIFIER","NUMBERS_AND_IDENTIFIER","camelCase","input","isArray","TypeError","pascalCase","preserveConsecutiveUppercase","trim","locale","string","toLocaleLowerCase","toUpperCase","toLocaleUpperCase","isLastCharLower","isLastCharUpper","isLastLastCharUpper","character","test","preserveCamelCase","lastIndex","m1","charAt","identifier","postProcess","module","exports"],"sourceRoot":""}